AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # ECR repository to store Docker images for run_engine
  RunEngineRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: run_engine

  # ECR repository to store Docker images for mousoutrade-web
  WebRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: mousoutrade-web

  # IAM role for CodeBuild with necessary permissions
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: '*'

  # IAM role for CodePipeline with necessary permissions
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetProjects
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                  - codebuild:StopBuildBatch
                  - codebuild:StopBuild
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - iam:PassRole
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackResource
                  - cloudformation:GetTemplate
                  - cloudformation:ValidateTemplate
                  - lambda:InvokeFunction
                Resource: '*'

  # IAM role for Lambda execution with necessary permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:Scan
                Resource: '*'

  # CodeBuild project to build the run_engine Docker image
  RunEngineBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RunEngineBuildProject
      Source:
        Type: GITHUB
        Location: https://github.com/mousou2003/mousoutrade.git
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${RunEngineRepository.RepositoryUri}
          - Name: WEB_REPOSITORY_URI
            Value: !Sub ${WebRepository.RepositoryUri}

  # CodeBuild project to run Docker Compose
  DockerComposeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: DockerComposeBuildProject
      Source:
        Type: CODEPIPELINE
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${RunEngineRepository.RepositoryUri}
          - Name: WEB_REPOSITORY_URI
            Value: !Sub ${WebRepository.RepositoryUri}

  # CodePipeline to automate the build and deployment process
  RunEnginePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: RunEnginePipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: mousou2003
                Repo: mousoutrade
                Branch: main
                OAuthToken: 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
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref RunEngineBuildProject
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: RunEngineStack
                Capabilities: CAPABILITY_IAM
                TemplatePath: BuildOutput::packaged-template.yml
        - Name: DockerCompose
          Actions:
            - Name: DockerCompose
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref DockerComposeBuildProject

  # Lambda function to run the engine
  RunEngineFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RunEngineFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub ${RunEngineRepository.RepositoryUri}:latest
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          AWS_ACCESS_KEY_ID: DUMMYIDEXAMPLE
          AWS_SECRET_ACCESS_KEY: DUMMYEXAMPLEKEY
          AWS_DEFAULT_REGION: us-west-2
          DYNAMODB_ENDPOINT: http://dynamodb-local:8000

  # Lambda function to trigger run_engine.py after deployment
  RunEngineTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RunEngineTriggerFunction
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: run_engine.lambda_handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref CodePipelineArtifactBucket
        S3Key: !Sub ${CodePipelineArtifactKey}/run_engine.zip
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          AWS_ACCESS_KEY_ID: DUMMYIDEXAMPLE
          AWS_SECRET_ACCESS_KEY: DUMMYEXAMPLEKEY
          AWS_DEFAULT_REGION: us-west-2
          DYNAMODB_ENDPOINT: http://dynamodb-local:8000

  # CloudWatch Events rule to trigger the Lambda function on a schedule
  RunEngineSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 2 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt RunEngineFunction.Arn
          Id: RunEngineFunctionTarget
    DependsOn: RunEngineFunction

  # CloudWatch Events rule to trigger the Lambda function after deployment
  RunEngineTriggerSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 3 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt RunEngineTriggerFunction.Arn
          Id: RunEngineTriggerFunctionTarget
    DependsOn: RunEngineTriggerFunction

  # Permission for CloudWatch Events to invoke the Lambda function
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RunEngineFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunEngineSchedule.Arn
    DependsOn: RunEngineSchedule

  # Permission for CloudWatch Events to invoke the Lambda function
  PermissionForEventsToInvokeLambdaTrigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RunEngineTriggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunEngineTriggerSchedule.Arn
    DependsOn: RunEngineTriggerSchedule

Outputs:
  # Output the URL to the CodePipeline
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${RunEnginePipeline}/view
    Description: URL to the CodePipeline